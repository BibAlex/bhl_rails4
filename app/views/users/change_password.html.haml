= javascript_include_tag 'users/change_password'

.container
  .row 
    .col-md-8.col-md-offset-2
      %div
        %fieldset
          %legend
            %h3.mg-top20
              = @page_title
          .form-horizontal
            = validation_errors_for(@user)
            = form_for @user, url: perform_change_password_user_path, builder: FormHelper::BHLFormBuilder ,
                       html: { name: 'userForm',
                               'novalidate' => '',
                               'ng-controller' => 'userValidateChangePaaword',
                               'ng-submit' => 'validateForm($event, userForm)'.html_safe,
                               method: "post" } do |f|            
              .form-group
                = f.label I18n.t('common.old_password') , class: 'col-sm-2 control-label' 
                .col-sm-10
                  = f.text_field :old_password, { type: "password",
                                                  class: "required form-control",
                                                  autocomplete: "off",
                                                  'ng-model' => 'old_password',
                                                  :required => true,
                                                  'ng-minlength' => "4",
                                                  'ng-maxlength' => "16" }
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[old_password]'].$error.required && (userForm['user[old_password]'].$touched || showErrors)".html_safe}
                    = "#{I18n.t('msgs.empty_password_error')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[old_password]'].$error.minlength".html_safe}
                    = "#{I18n.t('msgs.short_password_length')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[old_password]'].$error.maxlength".html_safe}
                    = "#{I18n.t('msgs.long_password_length')}"
              .form-group
                = f.label I18n.t('common.new_password') , class: 'col-sm-2 control-label'
                .col-sm-10
                  = f.password_field :entered_password, { type: "password",
                                                          class: "required form-control",
                                                          autocomplete: "off",
                                                          'ng-model' => 'entered_password',
                                                          :required => true,
                                                          'ng-minlength' => "4",
                                                          'ng-maxlength' => "16" }          
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password]'].$error.required && (userForm['user[entered_password]'].$touched || showErrors)".html_safe}
                    = "#{I18n.t('msgs.empty_password_error')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password]'].$error.minlength".html_safe}
                    = "#{I18n.t('msgs.short_password_length')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password]'].$error.maxlength".html_safe}
                    = "#{I18n.t('msgs.long_password_length')}"
              
              .form-group
                = f.label I18n.t('common.new_password_confirmation') , class: 'col-sm-2 control-label'
                .col-sm-10
                  = f.password_field :entered_password_confirmation, { type: "password",
                                                                       class: "required form-control",
                                                                       autocomplete: "off",
                                                                       'ng-model' => 'entered_password_confirmation',
                                                                       :required => true,
                                                                       'ng-minlength' => "4",
                                                                       'ng-maxlength' => "16" }              
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password_confirmation]'].$error.required && (userForm['user[entered_password_confirmation]'].$touched || showErrors)".html_safe}
                    = "#{I18n.t('msgs.empty_password_error')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password_confirmation]'].$error.minlength".html_safe}
                    = "#{I18n.t('msgs.short_password_length')}"
                  %span{ class: 'ng-validation-error',
                         'ng-show': "userForm['user[entered_password_confirmation]'].$error.maxlength".html_safe}
                    = "#{I18n.t('msgs.long_password_length')}"
              
              
              .form-group
                .col-sm-2
                .col-sm-10
                  = f.submit I18n.t('common.save'), class: "btn btn-primary", id: "submit"
                  = f.submit I18n.t('common.reset'), class: "btn btn-default", id: "clear", type: "reset"