= javascript_include_tag 'users/signup'

- user_form_params = get_user_form_params(user)

.col-md-12.column
  %div
    %fieldset
      %legend
        = user_form_params[:page_title]
      .form-horizontal
        = validation_errors_for(user)
        = form_for user, url: { action: action },
                    builder: FormHelper::BHLFormBuilder ,
                    html: { name: 'signupForm',
                            'ng-controller': 'signupValidate',
                            'novalidate': '',
                            'ng-submit': 'signupValidate($event, signupForm)'.html_safe} do |f|
          .form-group
            = f.label I18n.t('common.username'), class: 'col-sm-2 control-label'
            .col-sm-10
              = f.text_field :username,
                             class: 'required form-control',
                             required: true,
                             placeholder: I18n.t('common.username'),
                             'ng-model': 'username',
                             MinLength: 4,
                             MaxLength: 16,
                             pattern: '[a-zA-Z0-9]{4,16}'
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[username]'].$error.required && (signupForm['user[username]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.empty_user_name_error')
                %br
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[username]'].$error.minlength &&  (signupForm['user[username]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.short_username')
                %br
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[username]'].$error.pattern && !signupForm['user[username]'].$error.minlength && (signupForm['user[username]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.invalid_username_format')
                %br
          - if user.new_record?
            .form-group
              = f.label I18n.t('common.password') , class: 'col-sm-2 control-label'
              .col-sm-10
                = f.password_field :entered_password,
                                   'ng-model': 'entered_password',
                                   type: 'password',
                                   class: 'required form-control',
                                   autocomplete: 'off',
                                   MinLength: 8,
                                   MaxLength: 16,
                                   required: true,
                                   placeholder: I18n.t('common.password'),
                                   'ng-pattern': '/(?=.*[a-zA-Z])(?=.*[0-9])/'
                %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[entered_password]'].$error.required && (signupForm['user[entered_password]'].$touched || showErrors)".html_safe}
                  = I18n.t('msgs.empty_password_error')
                %span{class: 'ng-validation-error',
                    'ng-show': "(signupForm['user[entered_password]'].$error.pattern) && (signupForm['user[entered_password]'].$touched || showErrors)".html_safe}
                  = I18n.t('msgs.invalid_password_format')
            .form-group
              = f.label I18n.t('common.password_confirmation') , class: 'col-sm-2 control-label'
              .col-sm-10
                = f.password_field :entered_password_confirmation,
                                   'ng-model': 'entered_password_confirmation',
                                   type: 'password',
                                   class: 'required form-control',
                                   autocomplete: 'off',
                                   MaxLength: 16,
                                   required: true,
                                   placeholder: I18n.t('common.password_confirmation')
                %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[entered_password_confirmation]'].$error.required && (signupForm['user[entered_password_confirmation]'].$touched || showErrors)".html_safe}
                  = I18n.t('msgs.empty_password_confirmation_error')
                %span{class: 'ng-validation-error',
                    'ng-show': "(entered_password_confirmation != entered_password) && (signupForm['user[entered_password_confirmation]'].$touched || showErrors)".html_safe}
                  = I18n.t('msgs.invalid_password_confirmation')
          - else
            %a.btn{ style: 'cursor:pointer;', id: 'change_password' }
              = I18n.t('common.change_password')
            %div{ style: 'cursor:pointer;display:none;', id: 'change_password_block'}
              .form-group
                = f.label I18n.t('common.old_password') , class: 'col-sm-2 control-label'
                .col-sm-10
                  = f.text_field :old_password, { type: 'password', class: 'required form-control', autocomplete: 'off' }
              .form-group
                = f.label I18n.t('common.new_password') , class: 'col-sm-2 control-label'
                .col-sm-10
                  = f.password_field :entered_password, { type: 'password', class: 'required form-control', autocomplete: 'off' }
              .form-group
                = f.label I18n.t('common.new_password_confirmation') , class: 'col-sm-2 control-label'
                .col-sm-10
                  = f.password_field :entered_password_confirmation, { type: 'password', class: 'required form-control', autocomplete: 'off' }
          .form-group
            = f.label I18n.t('common.email'), class: 'col-sm-2 control-label'
            .col-sm-10
              = f.email_field :email,
                              class: 'required form-control',
                              MaxLength: 64,
                              placeholder: I18n.t('common.email'),
                              'ng-model': 'email',
                              required: true
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[email]'].$error.required && (signupForm['user[email]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.empty_email_error')
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[email]'].$error.email && (signupForm['user[email]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.invalid_email_error')
          .form-group
            = f.label I18n.t('common.email_confirmation'), class: 'col-sm-2 control-label'
            .col-sm-10
              = f.text_field :email_confirmation,
                             class: 'required form-control',
                             MaxLength: 64,
                             placeholder: I18n.t('common.email'),
                             'ng-model': 'email_confirmation',
                             required: true
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[email_confirmation]'].$error.required && (signupForm['user[email_confirmation]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.empty_email_error')
              %span{class: 'ng-validation-error',
                    'ng-show': "(email_confirmation != email) && (signupForm['user[email_confirmation]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.invalid_email_confirmation')
          .form-group
            = f.label I18n.t('common.real_name'), class: 'col-sm-2 control-label'
            .col-sm-10
              = f.text_field :real_name,
                             class: 'required form-control',
                             MinLength: 4,
                             MaxLength: 16,
                             required: true,
                             'ng-model': 'real_name'
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[real_name]'].$error.required && (signupForm['user[real_name]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.empty_real_name')
                %br
              %span{class: 'ng-validation-error',
                    'ng-show': "signupForm['user[real_name]'].$error.minlength &&  (signupForm['user[real_name]'].$touched || showErrors)".html_safe}
                = I18n.t('msgs.short_real_name')
                %br

          - if user_form_params[:verify_captcha]
            .form-group
              = f.label I18n.t('common.recaptcha'), class: 'required col-sm-2 control-label'
              .col-sm-10
                = recaptcha_tags(theme: 'clean',
                                 callback: 'recaptchaCallback')
                %br
                %span{class: 'ng-validation-error', 'ng-show' => 'recaptchaError'.html_safe}
                  = "#{I18n.t('msgs.recaptcha_error')}"
          - if(!(user.photo_name.blank?))
            - thumb = user.photo_name_url(:thumb)
            .form-group
              = f.label I18n.t('profile_photo'), class: 'col-sm-2 control-label'
              .col-sm-10
                = image_tag("#{thumb}", width: 150, border: 0)

          .form-group
            = f.label I18n.t('common.upload_photo'), class: 'col-sm-2 control-label'
            .col-sm-10
              .invisible_error_msg#photo_size_error_message
                = "#{I18n.t('msgs.upload_photo_max_size_error')} #{UPLOADED_PHOTO_MAX_SIZE} #{I18n.t('common.mb')}"
              .invisible_error_msg#photo_ext_error_message
                = "#{I18n.t('msgs.upload_photo_ext_error')}"
              = f.file_field :photo_name,
                             id: 'photo_name',
                             type: 'file',
                             class: 'btn btn-default',
                             validfile: ''
              %p.help-block
                = "#{I18n.t('warn.max_photo_size')} #{UPLOADED_PHOTO_MAX_SIZE} #{I18n.t('common.mb')}"
          .form-group
            .col-sm-2
            .col-sm-10
              - if user.new_record?
                = f.submit I18n.t('common.signup'), class: 'btn btn-primary', id: 'submit'
                = f.submit I18n.t('common.clear'), class: 'btn btn-default', id: 'clear', type: 'reset'
              - else
                = f.submit I18n.t('common.save'), class: 'btn btn-primary', id: 'submit'
                = f.submit I18n.t('common.reset'), class: 'btn btn-default', id: 'clear', type: 'reset'